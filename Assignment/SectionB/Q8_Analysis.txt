/*
    Q.8 : Your friends are starting a security company that needs to obtain licenses for
    n different pieces of cryptographic software. Due to regulations, they can only obtain
    these licenses at the rate of at most one per month. Each license is currently selling
    for a price of $100 . However, they are all becoming more expensive according to
    exponential growth curves: in particular, the cost of license j increases by a factor of
    rj greater than 1 each month, where rj is a given parameter. This means that if license %
    is purchased + months from now, it will cost 100.rj(t). We will assume that all the price
    growth rates are distinct; that is ri ≠ rj for license i ≠ j(even though they start at
    the same price of $100). The question is that: Given that the company can only buy at
    most one license a month, in which order should it buy the license so that the total
    amount of money it spends is as small as possible.
    Give an algorithm that takes the n rates of price growth r1, r2,..., rn and computes an
    order in which to buy the license so that the total amount of spent is minimized. The
    running time of the algorithm should be polynomial in n.
    
    Submitted By: Anjali Bansal (04)
*/


*******************************
Approach
*******************************

=> Iterative
=> Greedy


*******************************
Function1: 
findMax(l_arr[], n)
*******************************

/*
    Objective       : To find license number with maximum rate_of_growth
    Input parameters: l_arr - array of objects of license type
                      n - number of objects in array l_arr
    Return Value    : the license_no of software having maximum rate_of_growth value in l_arr
*/


*******************************
Function2: 
printOrder(l_arr[], n)
*******************************

/*
    Objective       : To find and print the order of buying license
    Input parameters: l_arr - array of objects of license type
                      n - number of objects in array l_arr
    Return Value    : None
*/


*******************************
Function3: 
amount(l_arr[], n)
*******************************

/*
    Objective       : To find the total minimized amount to be spend to buy license
    Input parameters: l_arr - array of objects of license type
                      n - number of objects in array l_arr
    Return Value    : the total minimized amount to be spend to buy license
*/


*******************************
Time Complexity
*******************************

Function 1: O(n)
Function 2: O(n^2) {As Function 2 iterates function 1 'n' times}
Function 3: O(n)

As Function 2 iterates function 1 'n' times,
Therefore, T(n) = O(n^2)

=> Time complexity = O(n^2)
